{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPRbai5XbYZnYYJb/kpZEZO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Arhamkazi123/WebScraping-Blogs/blob/main/Untitled7.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 833
        },
        "id": "woNXoYpXClhS",
        "outputId": "ded84dad-a5e1-4744-f9d7-5e09af9fdbcd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Upvotes                                              Title  \\\n",
              "0       16     The novice and the master: 5 programming jokes   \n",
              "1        7  The White House Memory Safety Appeal Is A Secu...   \n",
              "2       51                               In praise of Nushell   \n",
              "3        7                       Leap Year Test in K&R (2020)   \n",
              "4       16  You’ve just inherited a legacy C++ codebase, n...   \n",
              "5        8        Serving my blog posts as Linux manual pages   \n",
              "6       19                               Dotfiles digest: git   \n",
              "7       34        The siren song of domain-specific languages   \n",
              "8        5             K8s Service Meshes: The Bill Comes Due   \n",
              "9        5  The speed of improvement in servers may have s...   \n",
              "10       6                         List of 2024 Leap Day Bugs   \n",
              "11       3  Test Your Apps and Services with GitHub Action...   \n",
              "12       5  That Time I Accidentally Deleted a Game From MAME   \n",
              "13       6  Apple silicon: 4 A little help from friends an...   \n",
              "14      23                      Elvish scripting case studies   \n",
              "15       3                   What are you doing this weekend?   \n",
              "16       1                                   Snapshot Testing   \n",
              "17      10            The sins committed in the name of Agile   \n",
              "18      39                       JPEG XL and the Pareto Front   \n",
              "19       3  Simple Executable Love2D Files, or, You Can Sh...   \n",
              "20      18        Debian 64-bit time_t transition in progress   \n",
              "21       2                           Announcing CHERIoT-Audit   \n",
              "22      24   Array languages vs. the curse of the spreadsheet   \n",
              "23       7                              FOSDEM 2024 aftermath   \n",
              "24       8        Experimenting with GC-less (heap-less) Java   \n",
              "\n",
              "              Timestamp           Author  Comments  \n",
              "0   2024-02-29 20:23:13           piglei        15  \n",
              "1   2024-03-01 06:50:22         Foxboron        16  \n",
              "2   2024-02-29 05:08:52      larsyencken        26  \n",
              "3   2024-03-01 02:56:59            susam         1  \n",
              "4   2024-03-01 01:42:52           calvin         3  \n",
              "5   2024-03-01 06:31:07         gerikson         4  \n",
              "6   2024-02-29 16:17:50  adriangoransson         5  \n",
              "7   2024-02-29 06:53:29     Gabriella439        13  \n",
              "8   2024-03-01 03:53:03         maduggan         1  \n",
              "9   2024-03-01 05:03:13          carlana         4  \n",
              "10  2024-03-01 07:53:50         gerikson         0  \n",
              "11  2024-03-01 06:35:06           jacekg         0  \n",
              "12  2024-03-01 08:07:40           pushcx         0  \n",
              "13  2024-03-01 04:52:16              knl         1  \n",
              "14  2024-02-29 08:41:25             xiaq         8  \n",
              "15  2024-03-01 05:06:23            caius         3  \n",
              "16  2024-03-01 10:42:28               av         0  \n",
              "17  2024-02-29 11:54:04         asteroid        15  \n",
              "18  2024-02-29 06:34:49           lonjil        17  \n",
              "19  2024-03-01 07:06:42             eBPF         0  \n",
              "20  2024-02-29 09:09:51          sanxiyn        12  \n",
              "21  2024-03-01 08:50:35           calvin         0  \n",
              "22  2024-02-29 05:46:34         razetime        28  \n",
              "23  2024-02-29 22:52:12           Corbin         0  \n",
              "24  2024-02-29 15:36:06            xonix         0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ab21c88-7328-4cdd-afac-20dc8ab3dbf6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Upvotes</th>\n",
              "      <th>Title</th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>Author</th>\n",
              "      <th>Comments</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>16</td>\n",
              "      <td>The novice and the master: 5 programming jokes</td>\n",
              "      <td>2024-02-29 20:23:13</td>\n",
              "      <td>piglei</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7</td>\n",
              "      <td>The White House Memory Safety Appeal Is A Secu...</td>\n",
              "      <td>2024-03-01 06:50:22</td>\n",
              "      <td>Foxboron</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>51</td>\n",
              "      <td>In praise of Nushell</td>\n",
              "      <td>2024-02-29 05:08:52</td>\n",
              "      <td>larsyencken</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7</td>\n",
              "      <td>Leap Year Test in K&amp;R (2020)</td>\n",
              "      <td>2024-03-01 02:56:59</td>\n",
              "      <td>susam</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>16</td>\n",
              "      <td>You’ve just inherited a legacy C++ codebase, n...</td>\n",
              "      <td>2024-03-01 01:42:52</td>\n",
              "      <td>calvin</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>8</td>\n",
              "      <td>Serving my blog posts as Linux manual pages</td>\n",
              "      <td>2024-03-01 06:31:07</td>\n",
              "      <td>gerikson</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>19</td>\n",
              "      <td>Dotfiles digest: git</td>\n",
              "      <td>2024-02-29 16:17:50</td>\n",
              "      <td>adriangoransson</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>34</td>\n",
              "      <td>The siren song of domain-specific languages</td>\n",
              "      <td>2024-02-29 06:53:29</td>\n",
              "      <td>Gabriella439</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>5</td>\n",
              "      <td>K8s Service Meshes: The Bill Comes Due</td>\n",
              "      <td>2024-03-01 03:53:03</td>\n",
              "      <td>maduggan</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>5</td>\n",
              "      <td>The speed of improvement in servers may have s...</td>\n",
              "      <td>2024-03-01 05:03:13</td>\n",
              "      <td>carlana</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>6</td>\n",
              "      <td>List of 2024 Leap Day Bugs</td>\n",
              "      <td>2024-03-01 07:53:50</td>\n",
              "      <td>gerikson</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>3</td>\n",
              "      <td>Test Your Apps and Services with GitHub Action...</td>\n",
              "      <td>2024-03-01 06:35:06</td>\n",
              "      <td>jacekg</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>5</td>\n",
              "      <td>That Time I Accidentally Deleted a Game From MAME</td>\n",
              "      <td>2024-03-01 08:07:40</td>\n",
              "      <td>pushcx</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>6</td>\n",
              "      <td>Apple silicon: 4 A little help from friends an...</td>\n",
              "      <td>2024-03-01 04:52:16</td>\n",
              "      <td>knl</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>23</td>\n",
              "      <td>Elvish scripting case studies</td>\n",
              "      <td>2024-02-29 08:41:25</td>\n",
              "      <td>xiaq</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>3</td>\n",
              "      <td>What are you doing this weekend?</td>\n",
              "      <td>2024-03-01 05:06:23</td>\n",
              "      <td>caius</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1</td>\n",
              "      <td>Snapshot Testing</td>\n",
              "      <td>2024-03-01 10:42:28</td>\n",
              "      <td>av</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>10</td>\n",
              "      <td>The sins committed in the name of Agile</td>\n",
              "      <td>2024-02-29 11:54:04</td>\n",
              "      <td>asteroid</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>39</td>\n",
              "      <td>JPEG XL and the Pareto Front</td>\n",
              "      <td>2024-02-29 06:34:49</td>\n",
              "      <td>lonjil</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>3</td>\n",
              "      <td>Simple Executable Love2D Files, or, You Can Sh...</td>\n",
              "      <td>2024-03-01 07:06:42</td>\n",
              "      <td>eBPF</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>18</td>\n",
              "      <td>Debian 64-bit time_t transition in progress</td>\n",
              "      <td>2024-02-29 09:09:51</td>\n",
              "      <td>sanxiyn</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>2</td>\n",
              "      <td>Announcing CHERIoT-Audit</td>\n",
              "      <td>2024-03-01 08:50:35</td>\n",
              "      <td>calvin</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>24</td>\n",
              "      <td>Array languages vs. the curse of the spreadsheet</td>\n",
              "      <td>2024-02-29 05:46:34</td>\n",
              "      <td>razetime</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>7</td>\n",
              "      <td>FOSDEM 2024 aftermath</td>\n",
              "      <td>2024-02-29 22:52:12</td>\n",
              "      <td>Corbin</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>8</td>\n",
              "      <td>Experimenting with GC-less (heap-less) Java</td>\n",
              "      <td>2024-02-29 15:36:06</td>\n",
              "      <td>xonix</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ab21c88-7328-4cdd-afac-20dc8ab3dbf6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0ab21c88-7328-4cdd-afac-20dc8ab3dbf6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0ab21c88-7328-4cdd-afac-20dc8ab3dbf6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-52477b76-cb75-48ca-9fd0-0e028b901442\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52477b76-cb75-48ca-9fd0-0e028b901442')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-52477b76-cb75-48ca-9fd0-0e028b901442 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_675f0544-b8ff-49b3-bed0-8b4626660104\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_675f0544-b8ff-49b3-bed0-8b4626660104 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "repr_error": "'str' object has no attribute 'empty'"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import pandas as pd\n",
        "\n",
        "base_url = \"https://lobste.rs/page/\"\n",
        "pages_to_scrape = 1\n",
        "\n",
        "upvotes_list, title_list, timestamp_list, author_list, comment_list = [], [], [], [], []\n",
        "\n",
        "for page in range(1, pages_to_scrape + 1):\n",
        "    url = f\"{base_url}{page}\"\n",
        "    response = requests.get(url)\n",
        "\n",
        "    if response.status_code == 200:\n",
        "        soup = BeautifulSoup(response.content, 'html.parser')\n",
        "\n",
        "        stories = soup.find_all('div', class_='story_liner')\n",
        "\n",
        "        for story in stories:\n",
        "            upvotes_element = story.find('div', class_='score')\n",
        "            title_element = story.find('a', class_='u-url')\n",
        "            timestamp_element = story.find('span', title=True)\n",
        "            span_elements = story.find_all('span', class_='comments_label')\n",
        "\n",
        "            comments_elements = [span.find('a').text.strip() if span.find('a') else '0' for span in span_elements]\n",
        "            author_element = story.find('a', class_='byline')\n",
        "\n",
        "            if not author_element:\n",
        "                author_element = story.find('a', class_='u-author')\n",
        "            upvotes = upvotes_element.text.strip() if upvotes_element else \"N/A\"\n",
        "            title = title_element.text.strip() if title_element else \"N/A\"\n",
        "            timestamp = timestamp_element['title'] if timestamp_element else \"N/A\"\n",
        "            author = author_element.text.strip() if author_element else \"N/A\"\n",
        "            comments = ', '.join(comments_elements) if comments_elements else '0'\n",
        "\n",
        "            upvotes_list.append(upvotes)\n",
        "            title_list.append(title)\n",
        "            timestamp_list.append(timestamp)\n",
        "            author_list.append(author)\n",
        "            comment_list.append(comments)\n",
        "\n",
        "    else:\n",
        "        print(f\"Failed to retrieve the page {page}. Status code: {response.status_code}\")\n",
        "\n",
        "data = {'Upvotes': upvotes_list, 'Title': title_list, 'Timestamp': timestamp_list, 'Author': author_list,\n",
        "        'Comments': comment_list}\n",
        "df = pd.DataFrame(data)\n",
        "df['Timestamp'] = df['Timestamp'].str.replace(' -0600', '')\n",
        "df['Comments'] = df['Comments'].apply(lambda x: int(x.split()[0]) if x != '0' and x != 'no comments' else 0)\n",
        "\n",
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "display(df)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Removing punctuation and stop words from Text Column"
      ],
      "metadata": {
        "id": "ZRnH0vQUHahh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import pandas as pd\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "import string\n",
        "\n",
        "nltk.download('stopwords')\n",
        "\n",
        "base_url = \"https://lobste.rs/page/\"\n",
        "pages_to_scrape = 5\n",
        "\n",
        "upvotes_list, title_list, timestamp_list, author_list, comment_list = [], [], [], [], []\n",
        "\n",
        "for page in range(1, pages_to_scrape + 1):\n",
        "    url = f\"{base_url}{page}\"\n",
        "    response = requests.get(url)\n",
        "\n",
        "    if response.status_code == 200:\n",
        "        soup = BeautifulSoup(response.content, 'html.parser')\n",
        "\n",
        "        stories = soup.find_all('div', class_='story_liner')\n",
        "\n",
        "        for story in stories:\n",
        "            upvotes_element = story.find('div', class_='score')\n",
        "            title_element = story.find('a', class_='u-url')\n",
        "            timestamp_element = story.find('span', title=True)\n",
        "            span_elements = story.find_all('span', class_='comments_label')\n",
        "\n",
        "            comments_elements = [span.find('a').text.strip() if span.find('a') else '0' for span in span_elements]\n",
        "            author_element = story.find('a', class_='byline')\n",
        "\n",
        "            if not author_element:\n",
        "                author_element = story.find('a', class_='u-author')\n",
        "            upvotes = upvotes_element.text.strip() if upvotes_element else \"N/A\"\n",
        "            title = title_element.text.strip() if title_element else \"N/A\"\n",
        "            timestamp = timestamp_element['title'] if timestamp_element else \"N/A\"\n",
        "            author = author_element.text.strip() if author_element else \"N/A\"\n",
        "            comments = ', '.join(comments_elements) if comments_elements else '0'\n",
        "\n",
        "            upvotes_list.append(upvotes)\n",
        "            title_list.append(title)\n",
        "            timestamp_list.append(timestamp)\n",
        "            author_list.append(author)\n",
        "            comment_list.append(comments)\n",
        "\n",
        "    else:\n",
        "        print(f\"Failed to retrieve the page {page}. Status code: {response.status_code}\")\n",
        "\n",
        "data = {'Upvotes': upvotes_list, 'Title': title_list, 'Timestamp': timestamp_list, 'Author': author_list,\n",
        "        'Comments': comment_list}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "\n",
        "stop_words = set(stopwords.words('english'))\n",
        "df['Title'] = df['Title'].apply(lambda x: ' '.join([word for word in x.split() if word.lower() not in stop_words]))\n",
        "df['Title'] = df['Title'].apply(lambda x: x.translate(str.maketrans(\"\", \"\", string.punctuation)))\n",
        "\n",
        "df['Timestamp'] = df['Timestamp'].str.replace(' -0600', '')\n",
        "df['Comments'] = df['Comments'].apply(lambda x: int(x.split()[0]) if x != '0' and x != 'no comments' else 0)\n",
        "\n",
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "display(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 721
        },
        "id": "fmcRhRGSHgcX",
        "outputId": "71cfe6c6-e1c0-49a2-d7d1-1387e64c3245"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    Upvotes                                              Title  \\\n",
              "0        16                  novice master 5 programming jokes   \n",
              "1         7  White House Memory Safety Appeal Security Red ...   \n",
              "2         9              Serving blog posts Linux manual pages   \n",
              "3        51                                     praise Nushell   \n",
              "4         7                             Leap Year Test KR 2020   \n",
              "..      ...                                                ...   \n",
              "120       8                                               week   \n",
              "121       5  Herbgrind analyzes binaries find inaccurate fl...   \n",
              "122      25                             Wrapping Practical SML   \n",
              "123       9                   interactive guide Fourier series   \n",
              "124      13                              Twist Wadlers Printer   \n",
              "\n",
              "               Timestamp       Author  Comments  \n",
              "0    2024-02-29 20:23:13       piglei        16  \n",
              "1    2024-03-01 06:50:22     Foxboron        21  \n",
              "2    2024-03-01 06:31:07     gerikson         4  \n",
              "3    2024-02-29 05:08:52  larsyencken        26  \n",
              "4    2024-03-01 02:56:59        susam         1  \n",
              "..                   ...          ...       ...  \n",
              "120  2024-02-26 07:11:04        caius        36  \n",
              "121  2024-02-26 16:34:25      bshanks         0  \n",
              "122  2024-02-25 12:54:00         pzel        13  \n",
              "123  2024-02-26 03:58:18       injuly         0  \n",
              "124  2024-02-26 01:08:41        andyc         5  \n",
              "\n",
              "[125 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-18379e35-b92d-41cf-904e-8019508e2c8c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Upvotes</th>\n",
              "      <th>Title</th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>Author</th>\n",
              "      <th>Comments</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>16</td>\n",
              "      <td>novice master 5 programming jokes</td>\n",
              "      <td>2024-02-29 20:23:13</td>\n",
              "      <td>piglei</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7</td>\n",
              "      <td>White House Memory Safety Appeal Security Red ...</td>\n",
              "      <td>2024-03-01 06:50:22</td>\n",
              "      <td>Foxboron</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>9</td>\n",
              "      <td>Serving blog posts Linux manual pages</td>\n",
              "      <td>2024-03-01 06:31:07</td>\n",
              "      <td>gerikson</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>51</td>\n",
              "      <td>praise Nushell</td>\n",
              "      <td>2024-02-29 05:08:52</td>\n",
              "      <td>larsyencken</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7</td>\n",
              "      <td>Leap Year Test KR 2020</td>\n",
              "      <td>2024-03-01 02:56:59</td>\n",
              "      <td>susam</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>8</td>\n",
              "      <td>week</td>\n",
              "      <td>2024-02-26 07:11:04</td>\n",
              "      <td>caius</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121</th>\n",
              "      <td>5</td>\n",
              "      <td>Herbgrind analyzes binaries find inaccurate fl...</td>\n",
              "      <td>2024-02-26 16:34:25</td>\n",
              "      <td>bshanks</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>122</th>\n",
              "      <td>25</td>\n",
              "      <td>Wrapping Practical SML</td>\n",
              "      <td>2024-02-25 12:54:00</td>\n",
              "      <td>pzel</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>123</th>\n",
              "      <td>9</td>\n",
              "      <td>interactive guide Fourier series</td>\n",
              "      <td>2024-02-26 03:58:18</td>\n",
              "      <td>injuly</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124</th>\n",
              "      <td>13</td>\n",
              "      <td>Twist Wadlers Printer</td>\n",
              "      <td>2024-02-26 01:08:41</td>\n",
              "      <td>andyc</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>125 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-18379e35-b92d-41cf-904e-8019508e2c8c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-18379e35-b92d-41cf-904e-8019508e2c8c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-18379e35-b92d-41cf-904e-8019508e2c8c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a14ca290-237c-498e-872e-47a4a958a8b1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a14ca290-237c-498e-872e-47a4a958a8b1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a14ca290-237c-498e-872e-47a4a958a8b1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_693b3724-df09-49e1-8926-8bd1c1450c53\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_693b3724-df09-49e1-8926-8bd1c1450c53 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "repr_error": "'str' object has no attribute 'empty'"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Attempting Language constraint"
      ],
      "metadata": {
        "id": "E5a3Vx0oKFHm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import pandas as pd\n",
        "from langdetect import detect\n",
        "from googletrans import Translator\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "import string\n",
        "\n",
        "nltk.download('stopwords')\n",
        "\n",
        "base_url = \"https://lobste.rs/page/\"\n",
        "pages_to_scrape = 10\n",
        "\n",
        "upvotes_list, title_list, timestamp_list, author_list, comment_list = [], [], [], [], []\n",
        "\n",
        "for page in range(1, pages_to_scrape + 1):\n",
        "    url = f\"{base_url}{page}\"\n",
        "    response = requests.get(url)\n",
        "\n",
        "    if response.status_code == 200:\n",
        "        soup = BeautifulSoup(response.content, 'html.parser')\n",
        "\n",
        "        stories = soup.find_all('div', class_='story_liner')\n",
        "\n",
        "        for story in stories:\n",
        "            upvotes_element = story.find('div', class_='score')\n",
        "            title_element = story.find('a', class_='u-url')\n",
        "            timestamp_element = story.find('span', title=True)\n",
        "            span_elements = story.find_all('span', class_='comments_label')\n",
        "\n",
        "            comments_elements = [span.find('a').text.strip() if span.find('a') else '0' for span in span_elements]\n",
        "            author_element = story.find('a', class_='byline')\n",
        "\n",
        "            if not author_element:\n",
        "                author_element = story.find('a', class_='u-author')\n",
        "            upvotes = upvotes_element.text.strip() if upvotes_element else \"N/A\"\n",
        "            title = title_element.text.strip() if title_element else \"N/A\"\n",
        "            timestamp = timestamp_element['title'] if timestamp_element else \"N/A\"\n",
        "            author = author_element.text.strip() if author_element else \"N/A\"\n",
        "            comments = ', '.join(comments_elements) if comments_elements else '0'\n",
        "\n",
        "            upvotes_list.append(upvotes)\n",
        "            title_list.append(title)\n",
        "            timestamp_list.append(timestamp)\n",
        "            author_list.append(author)\n",
        "            comment_list.append(comments)\n",
        "\n",
        "    else:\n",
        "        print(f\"Failed to retrieve the page {page}. Status code: {response.status_code}\")\n",
        "\n",
        "data = {'Upvotes': upvotes_list, 'Title': title_list, 'Timestamp': timestamp_list, 'Author': author_list,\n",
        "        'Comments': comment_list}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "stop_words = set(stopwords.words('english'))\n",
        "df['Title'] = df['Title'].apply(lambda x: ' '.join([word for word in x.split() if word.lower() not in stop_words]))\n",
        "df['Title'] = df['Title'].apply(lambda x: x.translate(str.maketrans(\"\", \"\", string.punctuation)))\n",
        "\n",
        "def translate_to_english(text):\n",
        "    try:\n",
        "        lang = detect(text)\n",
        "        if lang != 'en':\n",
        "            translator = Translator()\n",
        "            text = translator.translate(text, dest='en').text\n",
        "        return text\n",
        "    except:\n",
        "        return text\n",
        "\n",
        "df['Title'] = df['Title'].apply(translate_to_english)\n",
        "\n",
        "df['Timestamp'] = df['Timestamp'].str.replace(' -0600', '')\n",
        "df['Comments'] = df['Comments'].apply(lambda x: int(x.split()[0]) if x != '0' and x != 'no comments' else 0)\n",
        "\n",
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "df.to_csv('/content/lobste_data.csv', index=False)\n",
        "\n",
        "\n",
        "display(df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oBC_yULNIiZm",
        "outputId": "46d6a651-558d-47e3-8a4c-af592e8b0c9c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(250, 5)\n"
          ]
        }
      ]
    }
  ]
}
